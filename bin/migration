$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require "rubygems"
require "bundler/setup"
require "gli"
require "migration"
require "json"
require "pp"
require "csv"
require "time"
require "fileutils"
require "logger"
require "gooddata"

include GLI::App

program_desc 'Program for project migration'


desc "Debug output to STDOUT"
switch [:d,:debug]


desc 'Scheduled mails project'
command :schedules_list do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Scheduled job started"
      puts(Time.now.inspect + " - Scheduled job started")
      migration.load_source_data
      migration.connect_for_export
	  migration.check_schedules_in_projects	
      migration.print_status
      $log.info Time.now.inspect + ' - Scheduled job ended'
      puts(Time.now.inspect + ' - Scheduled job ended')
  end
end



desc 'Unlock project'
command :unlock do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Unlock job started"
      puts(Time.now.inspect + " - Unlock job started")
      migration.load_source_data
      migration.connect_for_work
	  migration.unlocking_metric_reports	
      migration.print_status
      $log.info Time.now.inspect + ' - Unlock job ended'
      puts(Time.now.inspect + ' - Unlock job ended')
  end
end

desc 'Unlock project'
command :update do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Unlock job started"
      puts(Time.now.inspect + " - Unlock job started")
      migration.load_source_data
      migration.connect_for_work
	  migration.rename_factofs_identifier
	  migration.execute_maql_sanitize
	  migration.execute_partial_sanitize
      migration.print_status
      $log.info Time.now.inspect + ' - Unlock job ended'
      puts(Time.now.inspect + ' - Unlock job ended')
  end
end

desc 'Dummy project'
command :dummy_run do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Sanitize job started"
      puts(Time.now.inspect + " - Sanitize job started")
      migration.load_source_data
      migration.dummy
      migration.print_status
      $log.info Time.now.inspect + ' - Sanitize job ended'
      puts(Time.now.inspect + ' - Sanitize job ended')
  end
end

desc 'Run integrations'
command :run_integration do |c|

  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Sanitize job started"
      puts(Time.now.inspect + " - Sanitize job started")
      migration.load_source_data
      migration.connect_for_work
      migration.create_integration
      migration.create_endpoint_sanitize
      migration.run_integration
      migration.print_status
      $log.info Time.now.inspect + ' - Sanitize job ended'
      puts(Time.now.inspect + ' - Sanitize job ended')
  end
end


desc 'Sanitize project'
command :sanitize do |c|

  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Sanitize job started"
      puts(Time.now.inspect + " - Sanitize job started")
      migration.load_source_data
      migration.connect_for_work
      #migration.set_proper_status_sanitize
      migration.execute_maql_sanitize
      migration.load_dataset_sanitize
      #migration.change_type_sanitize
      migration.execute_partial_sanitize
      migration.run_integration_sanitize
      migration.print_status
      $log.info Time.now.inspect + ' - Sanitize job ended'
      puts(Time.now.inspect + ' - Sanitize job ended')
  end
end

desc 'Export results'
command :results do |c|

  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Export job started"
      puts(Time.now.inspect + " - Export job started")
      migration.write_results
      
      puts(Time.now.inspect + ' - Export job ended')
  end
end


desc 'Migrate project'
command :start do |c|

  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Migration job started"
      puts(Time.now.inspect + " - Migration job started")
      migration.load_source_data
      migration.load_data
      migration.get_export_tokens_projects
      migration.create_projects
      migration.import_projects
      migration.tag_entities
      migration.rename_date_facts
      migration.fix_date_facts
      migration.execute_maql
      migration.upload_file
      migration.apply_color_template
      # added method change_type (due to geomaps) before execute partial
      migration.change_type
      migration.execute_partial
      migration.swap_labels
      migration.swap_label_dash_filters
      migration.create_user
      migration.create_integration
      migration.create_endpoint
      migration.run_integration
      migration.print_status
      $log.info Time.now.inspect + ' - Migraton job ended'
      puts(Time.now.inspect + ' - Migraton job ended')
  end
end



desc 'ZD4 Fix'
command :zd4fix do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Migration job started"
      puts(Time.now.inspect + " - Migration job started")
      migration.load_source_data
	  migration.connect_for_work
	  migration.execute_partial_zd4_fix
	  migration.execute_maql_zd4_fix
      migration.print_status
      $log.info Time.now.inspect + ' - Migraton job ended'
      puts(Time.now.inspect + ' - Migraton job ended')
  end
end


desc 'Upload datasets'
command :upload do |c|

  desc "Continue"
  switch [:c,:continue]


  c.action do |global_options,options,args|
    migration = Migration::MigrationTasks.new()
    migration.upload_file(global_options[:continue])
    migration.replace_satisfaction_values
  end
end



pre do |global,command,options,args|
  next true if command.nil?
  $log = Logger.new("log/migration.log",'daily') if !global[:debug]
  $log = Logger.new(STDOUT) if global[:debug]
  $log.level = Logger::INFO
  true
end

on_error do |exception|
  $log ||= Logger.new(STDOUT)
  $log.level = Logger::DEBUG
  $log.error exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    $log.error exception.inspect
    false
  else
    $log.error exception.inspect
    false
  end
end




exit run(ARGV)




