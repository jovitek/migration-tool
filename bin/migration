$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require "rubygems"
require "bundler/setup"
require "gli"
require "migration"
require "json"
require "pp"
require "csv"
require "time"
require "fileutils"
require "logger"
require "gooddata"

include GLI::App

program_desc 'Program for project migration'


desc "Debug output to STDOUT"
switch [:d,:debug]


# MD Partial Update command.
# Use it in case you want to run metadata import to specified projects.

desc 'Partial Update'
command :md_partial_update do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Migration job started"
      puts(Time.now.inspect + " - Migration job started")
      migration.load_source_data
	  migration.connect_for_work
	  migration.execute_partial_zd4
      migration.print_status
      $log.info Time.now.inspect + ' - Migraton job ended'
      puts(Time.now.inspect + ' - Migraton job ended')
  end
end

# Timeline update command.
# Use it in case you want to run metadata import to specified projects.
desc 'Timeline Update'
command :timeline_update do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Migration job started"
      puts(Time.now.inspect + " - Migration job started")
      migration.load_source_data
      migration.connect_for_work
      migration.dummy
      migration.upload_file
      migration.apply_color_template
      migration.print_status
      $log.info Time.now.inspect + ' - Timeline Upload job ended'
      puts(Time.now.inspect + ' - Timeline Upload job ended')
  end
end

desc 'Migrate project'
command :start do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Migration job started"
      puts(Time.now.inspect + " - Migration job started")
      migration.load_source_data
      migration.load_data
      migration.get_export_tokens_projects
      migration.create_projects
      migration.import_projects
      migration.unlocking_all
      migration.tag_entities
      migration.rename_date_facts
      migration.fix_date_facts
      migration.execute_maql
      migration.upload_file
      migration.apply_color_template
      # added method change_type (due to geomaps) before execute partial
      migration.change_type
      migration.execute_partial
      migration.swap_labels
      migration.swap_label_dash_filters
      # this will update a value of metric when a metric with "fact.zendesktickets.resolutiontime"fact is used
      migration.update_of_fact_value
      migration.create_user
      migration.create_integration
      migration.create_endpoint
      migration.run_integration
      migration.print_status
      $log.info Time.now.inspect + ' - Migraton job ended'
      puts(Time.now.inspect + ' - Migraton job ended')
  end
end

desc 'Export results'
command :results do |c|
  c.action do |global_options,options,args|
      migration = Migration::MigrationTasks.new()
      $log.info Time.now.inspect + " - Export job started"
      puts(Time.now.inspect + " - Export job started")
      migration.write_results      
      puts(Time.now.inspect + ' - Export job ended')
  end
end


pre do |global,command,options,args|
  next true if command.nil?
  $log = Logger.new("log/migration.log",'daily') if !global[:debug]
  $log = Logger.new(STDOUT) if global[:debug]
  $log.level = Logger::INFO
  true
end

on_error do |exception|
  $log ||= Logger.new(STDOUT)
  $log.level = Logger::DEBUG
  $log.error exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    $log.error exception.inspect
    false
  else
    $log.error exception.inspect
    false
  end
end

exit run(ARGV)




